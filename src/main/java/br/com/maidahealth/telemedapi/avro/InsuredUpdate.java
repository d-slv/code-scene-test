/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.maidahealth.telemedapi.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class InsuredUpdate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2913745560953567624L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InsuredUpdate\",\"namespace\":\"br.com.maidahealth.telemedapi.avro\",\"fields\":[{\"name\":\"publicToken\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"cpf\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InsuredUpdate> ENCODER =
      new BinaryMessageEncoder<InsuredUpdate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InsuredUpdate> DECODER =
      new BinaryMessageDecoder<InsuredUpdate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<InsuredUpdate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<InsuredUpdate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InsuredUpdate>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this InsuredUpdate to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a InsuredUpdate from a ByteBuffer. */
  public static InsuredUpdate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String publicToken;
  @Deprecated public java.lang.String cpf;
  @Deprecated public java.lang.String phoneNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InsuredUpdate() {}

  /**
   * All-args constructor.
   * @param publicToken The new value for publicToken
   * @param cpf The new value for cpf
   * @param phoneNumber The new value for phoneNumber
   */
  public InsuredUpdate(java.lang.String publicToken, java.lang.String cpf, java.lang.String phoneNumber) {
    this.publicToken = publicToken;
    this.cpf = cpf;
    this.phoneNumber = phoneNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return publicToken;
    case 1: return cpf;
    case 2: return phoneNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: publicToken = (java.lang.String)value$; break;
    case 1: cpf = (java.lang.String)value$; break;
    case 2: phoneNumber = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'publicToken' field.
   * @return The value of the 'publicToken' field.
   */
  public java.lang.String getPublicToken() {
    return publicToken;
  }

  /**
   * Sets the value of the 'publicToken' field.
   * @param value the value to set.
   */
  public void setPublicToken(java.lang.String value) {
    this.publicToken = value;
  }

  /**
   * Gets the value of the 'cpf' field.
   * @return The value of the 'cpf' field.
   */
  public java.lang.String getCpf() {
    return cpf;
  }

  /**
   * Sets the value of the 'cpf' field.
   * @param value the value to set.
   */
  public void setCpf(java.lang.String value) {
    this.cpf = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public java.lang.String getPhoneNumber() {
    return phoneNumber;
  }

  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(java.lang.String value) {
    this.phoneNumber = value;
  }

  /**
   * Creates a new InsuredUpdate RecordBuilder.
   * @return A new InsuredUpdate RecordBuilder
   */
  public static br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder newBuilder() {
    return new br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder();
  }

  /**
   * Creates a new InsuredUpdate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InsuredUpdate RecordBuilder
   */
  public static br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder newBuilder(br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder other) {
    return new br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder(other);
  }

  /**
   * Creates a new InsuredUpdate RecordBuilder by copying an existing InsuredUpdate instance.
   * @param other The existing instance to copy.
   * @return A new InsuredUpdate RecordBuilder
   */
  public static br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder newBuilder(br.com.maidahealth.telemedapi.avro.InsuredUpdate other) {
    return new br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder(other);
  }

  /**
   * RecordBuilder for InsuredUpdate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InsuredUpdate>
    implements org.apache.avro.data.RecordBuilder<InsuredUpdate> {

    private java.lang.String publicToken;
    private java.lang.String cpf;
    private java.lang.String phoneNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.publicToken)) {
        this.publicToken = data().deepCopy(fields()[0].schema(), other.publicToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cpf)) {
        this.cpf = data().deepCopy(fields()[1].schema(), other.cpf);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[2].schema(), other.phoneNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing InsuredUpdate instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.maidahealth.telemedapi.avro.InsuredUpdate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.publicToken)) {
        this.publicToken = data().deepCopy(fields()[0].schema(), other.publicToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cpf)) {
        this.cpf = data().deepCopy(fields()[1].schema(), other.cpf);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[2].schema(), other.phoneNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'publicToken' field.
      * @return The value.
      */
    public java.lang.String getPublicToken() {
      return publicToken;
    }

    /**
      * Sets the value of the 'publicToken' field.
      * @param value The value of 'publicToken'.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder setPublicToken(java.lang.String value) {
      validate(fields()[0], value);
      this.publicToken = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'publicToken' field has been set.
      * @return True if the 'publicToken' field has been set, false otherwise.
      */
    public boolean hasPublicToken() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'publicToken' field.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder clearPublicToken() {
      publicToken = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cpf' field.
      * @return The value.
      */
    public java.lang.String getCpf() {
      return cpf;
    }

    /**
      * Sets the value of the 'cpf' field.
      * @param value The value of 'cpf'.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder setCpf(java.lang.String value) {
      validate(fields()[1], value);
      this.cpf = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cpf' field has been set.
      * @return True if the 'cpf' field has been set, false otherwise.
      */
    public boolean hasCpf() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cpf' field.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder clearCpf() {
      cpf = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public java.lang.String getPhoneNumber() {
      return phoneNumber;
    }

    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder setPhoneNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.phoneNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.InsuredUpdate.Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InsuredUpdate build() {
      try {
        InsuredUpdate record = new InsuredUpdate();
        record.publicToken = fieldSetFlags()[0] ? this.publicToken : (java.lang.String) defaultValue(fields()[0]);
        record.cpf = fieldSetFlags()[1] ? this.cpf : (java.lang.String) defaultValue(fields()[1]);
        record.phoneNumber = fieldSetFlags()[2] ? this.phoneNumber : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InsuredUpdate>
    WRITER$ = (org.apache.avro.io.DatumWriter<InsuredUpdate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InsuredUpdate>
    READER$ = (org.apache.avro.io.DatumReader<InsuredUpdate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
