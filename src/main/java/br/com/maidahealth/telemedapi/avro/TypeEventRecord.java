/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.maidahealth.telemedapi.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TypeEventRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -397890756130384038L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TypeEventRecord\",\"namespace\":\"br.com.maidahealth.telemedapi.avro\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"appointment\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TypeEventRecord> ENCODER =
      new BinaryMessageEncoder<TypeEventRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TypeEventRecord> DECODER =
      new BinaryMessageDecoder<TypeEventRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TypeEventRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TypeEventRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TypeEventRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TypeEventRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TypeEventRecord from a ByteBuffer. */
  public static TypeEventRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String eventType;
  @Deprecated public java.lang.String date;
  @Deprecated public java.lang.String appointment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TypeEventRecord() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param date The new value for date
   * @param appointment The new value for appointment
   */
  public TypeEventRecord(java.lang.String eventType, java.lang.String date, java.lang.String appointment) {
    this.eventType = eventType;
    this.date = date;
    this.appointment = appointment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return date;
    case 2: return appointment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = (java.lang.String)value$; break;
    case 1: date = (java.lang.String)value$; break;
    case 2: appointment = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'appointment' field.
   * @return The value of the 'appointment' field.
   */
  public java.lang.String getAppointment() {
    return appointment;
  }

  /**
   * Sets the value of the 'appointment' field.
   * @param value the value to set.
   */
  public void setAppointment(java.lang.String value) {
    this.appointment = value;
  }

  /**
   * Creates a new TypeEventRecord RecordBuilder.
   * @return A new TypeEventRecord RecordBuilder
   */
  public static br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder newBuilder() {
    return new br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder();
  }

  /**
   * Creates a new TypeEventRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TypeEventRecord RecordBuilder
   */
  public static br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder newBuilder(br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder other) {
    return new br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder(other);
  }

  /**
   * Creates a new TypeEventRecord RecordBuilder by copying an existing TypeEventRecord instance.
   * @param other The existing instance to copy.
   * @return A new TypeEventRecord RecordBuilder
   */
  public static br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder newBuilder(br.com.maidahealth.telemedapi.avro.TypeEventRecord other) {
    return new br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder(other);
  }

  /**
   * RecordBuilder for TypeEventRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TypeEventRecord>
    implements org.apache.avro.data.RecordBuilder<TypeEventRecord> {

    private java.lang.String eventType;
    private java.lang.String date;
    private java.lang.String appointment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appointment)) {
        this.appointment = data().deepCopy(fields()[2].schema(), other.appointment);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TypeEventRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.maidahealth.telemedapi.avro.TypeEventRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appointment)) {
        this.appointment = data().deepCopy(fields()[2].schema(), other.appointment);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder setEventType(java.lang.String value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.String getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder setDate(java.lang.String value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'appointment' field.
      * @return The value.
      */
    public java.lang.String getAppointment() {
      return appointment;
    }

    /**
      * Sets the value of the 'appointment' field.
      * @param value The value of 'appointment'.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder setAppointment(java.lang.String value) {
      validate(fields()[2], value);
      this.appointment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'appointment' field has been set.
      * @return True if the 'appointment' field has been set, false otherwise.
      */
    public boolean hasAppointment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'appointment' field.
      * @return This builder.
      */
    public br.com.maidahealth.telemedapi.avro.TypeEventRecord.Builder clearAppointment() {
      appointment = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TypeEventRecord build() {
      try {
        TypeEventRecord record = new TypeEventRecord();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (java.lang.String) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.String) defaultValue(fields()[1]);
        record.appointment = fieldSetFlags()[2] ? this.appointment : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TypeEventRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TypeEventRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TypeEventRecord>
    READER$ = (org.apache.avro.io.DatumReader<TypeEventRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
